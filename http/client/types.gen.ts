// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};

export type GetApiAuthKeysData = {
  body?: never;
  path?: never;
  query?: {
    owner?: string;
  };
  url: "/api/auth/keys";
};

export type GetApiAuthKeysErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type GetApiAuthKeysError =
  GetApiAuthKeysErrors[keyof GetApiAuthKeysErrors];

export type GetApiAuthKeysResponses = {
  /**
   * A list of API keys
   */
  200: Array<{
    key: string;
    owner: string;
    name?: string;
    quotas: {
      requestsPerSecond: number;
      requestsPerDay: number;
      totalRequests: number;
    };
    enabled: boolean;
  }>;
};

export type GetApiAuthKeysResponse =
  GetApiAuthKeysResponses[keyof GetApiAuthKeysResponses];

export type PostApiAuthKeysData = {
  body?: {
    owner: string;
    name?: string;
    quotas: {
      requestsPerSecond: number;
      requestsPerDay: number;
      totalRequests: number;
    };
  };
  path?: never;
  query?: never;
  url: "/api/auth/keys";
};

export type PostApiAuthKeysErrors = {
  /**
   * Error response
   */
  400: {
    error: string;
  };
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type PostApiAuthKeysError =
  PostApiAuthKeysErrors[keyof PostApiAuthKeysErrors];

export type PostApiAuthKeysResponses = {
  /**
   * API key created successfully
   */
  201: {
    key: string;
    owner: string;
    name?: string;
    quotas: {
      requestsPerSecond: number;
      requestsPerDay: number;
      totalRequests: number;
    };
    enabled: boolean;
  };
};

export type PostApiAuthKeysResponse =
  PostApiAuthKeysResponses[keyof PostApiAuthKeysResponses];

export type DeleteApiAuthKeysIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/auth/keys/{id}";
};

export type DeleteApiAuthKeysIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type DeleteApiAuthKeysIdError =
  DeleteApiAuthKeysIdErrors[keyof DeleteApiAuthKeysIdErrors];

export type DeleteApiAuthKeysIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success: boolean;
  };
};

export type DeleteApiAuthKeysIdResponse =
  DeleteApiAuthKeysIdResponses[keyof DeleteApiAuthKeysIdResponses];

export type GetApiAuthKeysIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/auth/keys/{id}";
};

export type GetApiAuthKeysIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiAuthKeysIdError =
  GetApiAuthKeysIdErrors[keyof GetApiAuthKeysIdErrors];

export type GetApiAuthKeysIdResponses = {
  /**
   * API key details
   */
  200: {
    key: string;
    owner: string;
    name?: string;
    quotas: {
      requestsPerSecond: number;
      requestsPerDay: number;
      totalRequests: number;
    };
    enabled: boolean;
  };
};

export type GetApiAuthKeysIdResponse =
  GetApiAuthKeysIdResponses[keyof GetApiAuthKeysIdResponses];

export type PatchApiAuthKeysIdData = {
  body?: {
    owner?: string;
    name?: string;
    quotas?: {
      requestsPerSecond?: number;
      requestsPerDay?: number;
      totalRequests?: number;
    };
    enabled?: boolean;
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/auth/keys/{id}";
};

export type PatchApiAuthKeysIdErrors = {
  /**
   * Error response
   */
  400: {
    error: string;
  };
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PatchApiAuthKeysIdError =
  PatchApiAuthKeysIdErrors[keyof PatchApiAuthKeysIdErrors];

export type PatchApiAuthKeysIdResponses = {
  /**
   * API key updated successfully
   */
  200: {
    key: string;
    owner: string;
    name?: string;
    quotas: {
      requestsPerSecond: number;
      requestsPerDay: number;
      totalRequests: number;
    };
    enabled: boolean;
  };
};

export type PatchApiAuthKeysIdResponse =
  PatchApiAuthKeysIdResponses[keyof PatchApiAuthKeysIdResponses];

export type GetApiAuthUsageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/usage";
};

export type GetApiAuthUsageErrors = {
  /**
   * Error response
   */
  400: {
    error: string;
  };
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiAuthUsageError =
  GetApiAuthUsageErrors[keyof GetApiAuthUsageErrors];

export type GetApiAuthUsageResponses = {
  /**
   * Usage statistics
   */
  200: {
    second: number;
    day: number;
    total: number;
  };
};

export type GetApiAuthUsageResponse =
  GetApiAuthUsageResponses[keyof GetApiAuthUsageResponses];

export type PostApiAuthUsageReportData = {
  body?: {
    metric?: {
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      field?: string;
    };
    timeRange: {
      start: string;
      end: string;
    };
    granularity: string;
    owner?: string;
  };
  path?: never;
  query?: {
    realtime?: string;
  };
  url: "/api/auth/usage/report";
};

export type PostApiAuthUsageReportErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type PostApiAuthUsageReportError =
  PostApiAuthUsageReportErrors[keyof PostApiAuthUsageReportErrors];

export type PostApiAuthUsageReportResponses = {
  /**
   * Usage report data
   */
  200: Array<{
    timestamp: string;
    value: number;
    category?: string;
  }>;
};

export type PostApiAuthUsageReportResponse =
  PostApiAuthUsageReportResponses[keyof PostApiAuthUsageReportResponses];

export type PostApiAuthUsageDatasetData = {
  body?: {
    metrics?: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity: string;
  };
  path?: never;
  query?: {
    realtime?: string;
  };
  url: "/api/auth/usage/dataset";
};

export type PostApiAuthUsageDatasetErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type PostApiAuthUsageDatasetError =
  PostApiAuthUsageDatasetErrors[keyof PostApiAuthUsageDatasetErrors];

export type PostApiAuthUsageDatasetResponses = {
  /**
   * Usage dataset data
   */
  200: Array<{
    timestamp: string;
  }>;
};

export type PostApiAuthUsageDatasetResponse =
  PostApiAuthUsageDatasetResponses[keyof PostApiAuthUsageDatasetResponses];

export type PostApiEventsSourceIdEventsData = {
  body?: {
    type: string;
    uuid: string;
    payload?: {
      [key: string]: unknown;
    };
    attributions?: Array<{
      type: string;
      value: string;
    }>;
    timestamp?: string;
  };
  path: {
    sourceId: string;
  };
  query?: never;
  url: "/api/events/{sourceId}/events";
};

export type PostApiEventsSourceIdEventsErrors = {
  /**
   * Invalid request body or parameters
   */
  400: unknown;
  /**
   * Source not found
   */
  404: unknown;
};

export type PostApiEventsSourceIdEventsResponses = {
  /**
   * Event recorded successfully
   */
  200: unknown;
};

export type GetApiEventSourcesData = {
  body?: never;
  path?: never;
  query?: {
    owners?: string;
  };
  url: "/api/event-sources";
};

export type GetApiEventSourcesErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type GetApiEventSourcesError =
  GetApiEventSourcesErrors[keyof GetApiEventSourcesErrors];

export type GetApiEventSourcesResponses = {
  /**
   * A list of event source definitions
   */
  200: Array<{
    id: string;
    name: string;
    description?: string;
    owners?: Array<string>;
    eventTypes?: Array<{
      name: string;
      description?: string;
    }>;
    retention?: {
      hotDays: number;
      offloaderPlugin?: string;
    };
  }>;
};

export type GetApiEventSourcesResponse =
  GetApiEventSourcesResponses[keyof GetApiEventSourcesResponses];

export type PostApiEventSourcesData = {
  body?: {
    name: string;
    description?: string;
    owners?: Array<string>;
    eventTypes?: Array<{
      name: string;
      description?: string;
    }>;
  };
  path?: never;
  query?: never;
  url: "/api/event-sources";
};

export type PostApiEventSourcesResponses = {
  /**
   * Event source created successfully
   */
  201: {
    id: string;
    name: string;
    description?: string;
    owners?: Array<string>;
    eventTypes?: Array<{
      name: string;
      description?: string;
    }>;
    retention?: {
      hotDays: number;
      offloaderPlugin?: string;
    };
  };
};

export type PostApiEventSourcesResponse =
  PostApiEventSourcesResponses[keyof PostApiEventSourcesResponses];

export type DeleteApiEventSourcesIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/event-sources/{id}";
};

export type DeleteApiEventSourcesIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type DeleteApiEventSourcesIdError =
  DeleteApiEventSourcesIdErrors[keyof DeleteApiEventSourcesIdErrors];

export type DeleteApiEventSourcesIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success: boolean;
  };
};

export type DeleteApiEventSourcesIdResponse =
  DeleteApiEventSourcesIdResponses[keyof DeleteApiEventSourcesIdResponses];

export type GetApiEventSourcesIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/event-sources/{id}";
};

export type GetApiEventSourcesIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiEventSourcesIdError =
  GetApiEventSourcesIdErrors[keyof GetApiEventSourcesIdErrors];

export type GetApiEventSourcesIdResponses = {
  /**
   * A single event source definition
   */
  200: {
    id: string;
    name: string;
    description?: string;
    owners?: Array<string>;
    eventTypes?: Array<{
      name: string;
      description?: string;
    }>;
    retention?: {
      hotDays: number;
      offloaderPlugin?: string;
    };
  };
};

export type GetApiEventSourcesIdResponse =
  GetApiEventSourcesIdResponses[keyof GetApiEventSourcesIdResponses];

export type PatchApiEventSourcesIdData = {
  body?: {
    name?: string;
    description?: string;
    owners?: Array<string>;
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/event-sources/{id}";
};

export type PatchApiEventSourcesIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PatchApiEventSourcesIdError =
  PatchApiEventSourcesIdErrors[keyof PatchApiEventSourcesIdErrors];

export type PatchApiEventSourcesIdResponses = {
  /**
   * Event source updated successfully
   */
  200: {
    id: string;
    name: string;
    description?: string;
    owners?: Array<string>;
    eventTypes?: Array<{
      name: string;
      description?: string;
    }>;
    retention?: {
      hotDays: number;
      offloaderPlugin?: string;
    };
  };
};

export type PatchApiEventSourcesIdResponse =
  PatchApiEventSourcesIdResponses[keyof PatchApiEventSourcesIdResponses];

export type GetApiEventSourcesIdEventsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    limit?: string;
  };
  url: "/api/event-sources/{id}/events";
};

export type GetApiEventSourcesIdEventsErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiEventSourcesIdEventsError =
  GetApiEventSourcesIdEventsErrors[keyof GetApiEventSourcesIdEventsErrors];

export type GetApiEventSourcesIdEventsResponses = {
  /**
   * A list of recent events
   */
  200: Array<unknown>;
};

export type GetApiEventSourcesIdEventsResponse =
  GetApiEventSourcesIdEventsResponses[
    keyof GetApiEventSourcesIdEventsResponses
  ];

export type GetApiAggregationSourcesData = {
  body?: never;
  path?: never;
  query: {
    reportId: string;
  };
  url: "/api/aggregation-sources";
};

export type GetApiAggregationSourcesErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiAggregationSourcesError =
  GetApiAggregationSourcesErrors[keyof GetApiAggregationSourcesErrors];

export type GetApiAggregationSourcesResponses = {
  /**
   * A list of aggregation sources for the report
   */
  200: Array<{
    id: string;
    reportId: string;
    targetCollection: string;
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    aggregations?: Array<{
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      payloadField?: string;
      categoryField?: string;
    }>;
    filter?: {
      sources: Array<{
        id: string;
        name: string;
      }>;
      events: Array<string>;
    };
  }>;
};

export type GetApiAggregationSourcesResponse =
  GetApiAggregationSourcesResponses[keyof GetApiAggregationSourcesResponses];

export type PostApiAggregationSourcesData = {
  body?: {
    targetCollection: string;
    granularity?:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    filter?: {
      sources: Array<{
        id: string;
        name: string;
      }>;
      events: Array<string>;
    };
    aggregations?: Array<{
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      payloadField?: string;
      categoryField?: string;
    }>;
  };
  path?: never;
  query: {
    reportId: string;
  };
  url: "/api/aggregation-sources";
};

export type PostApiAggregationSourcesErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiAggregationSourcesError =
  PostApiAggregationSourcesErrors[keyof PostApiAggregationSourcesErrors];

export type PostApiAggregationSourcesResponses = {
  /**
   * Aggregation source created successfully
   */
  201: {
    id: string;
    reportId: string;
    targetCollection: string;
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    aggregations?: Array<{
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      payloadField?: string;
      categoryField?: string;
    }>;
    filter?: {
      sources: Array<{
        id: string;
        name: string;
      }>;
      events: Array<string>;
    };
  };
};

export type PostApiAggregationSourcesResponse =
  PostApiAggregationSourcesResponses[keyof PostApiAggregationSourcesResponses];

export type DeleteApiAggregationSourcesSourceIdData = {
  body?: never;
  path: {
    sourceId: string;
  };
  query?: never;
  url: "/api/aggregation-sources/{sourceId}";
};

export type DeleteApiAggregationSourcesSourceIdErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
  /**
   * Error response
   */
  403: {
    error: string;
  };
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type DeleteApiAggregationSourcesSourceIdError =
  DeleteApiAggregationSourcesSourceIdErrors[
    keyof DeleteApiAggregationSourcesSourceIdErrors
  ];

export type DeleteApiAggregationSourcesSourceIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success: boolean;
  };
};

export type DeleteApiAggregationSourcesSourceIdResponse =
  DeleteApiAggregationSourcesSourceIdResponses[
    keyof DeleteApiAggregationSourcesSourceIdResponses
  ];

export type GetApiReportsData = {
  body?: never;
  path?: never;
  query?: {
    owners?: string;
  };
  url: "/api/reports";
};

export type GetApiReportsErrors = {
  /**
   * Error response
   */
  401: {
    error: string;
  };
};

export type GetApiReportsError = GetApiReportsErrors[keyof GetApiReportsErrors];

export type GetApiReportsResponses = {
  /**
   * A list of report definitions
   */
  200: Array<{
    id: string;
    name: string;
    description?: string;
    active: boolean;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiReportsResponse =
  GetApiReportsResponses[keyof GetApiReportsResponses];

export type PostApiReportsData = {
  body?: {
    name: string;
    description?: string;
    active?: boolean;
  };
  path?: never;
  query?: {
    owner?: string;
  };
  url: "/api/reports";
};

export type PostApiReportsResponses = {
  /**
   * Report created successfully
   */
  201: {
    id: string;
    name: string;
    description?: string;
    active: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiReportsResponse =
  PostApiReportsResponses[keyof PostApiReportsResponses];

export type GetApiReportsIdMetaData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/meta";
};

export type GetApiReportsIdMetaErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiReportsIdMetaError =
  GetApiReportsIdMetaErrors[keyof GetApiReportsIdMetaErrors];

export type GetApiReportsIdMetaResponses = {
  /**
   * Report metadata
   */
  200: {
    metrics: Array<string>;
    groupableFields: Array<string>;
    eventSources: Array<string>;
    eventTypes: Array<string>;
  };
};

export type GetApiReportsIdMetaResponse =
  GetApiReportsIdMetaResponses[keyof GetApiReportsIdMetaResponses];

export type DeleteApiReportsIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}";
};

export type DeleteApiReportsIdErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type DeleteApiReportsIdError =
  DeleteApiReportsIdErrors[keyof DeleteApiReportsIdErrors];

export type DeleteApiReportsIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success: boolean;
  };
};

export type DeleteApiReportsIdResponse =
  DeleteApiReportsIdResponses[keyof DeleteApiReportsIdResponses];

export type GetApiReportsIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}";
};

export type GetApiReportsIdErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type GetApiReportsIdError =
  GetApiReportsIdErrors[keyof GetApiReportsIdErrors];

export type GetApiReportsIdResponses = {
  /**
   * A single report definition
   */
  200: {
    id: string;
    name: string;
    description?: string;
    active: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiReportsIdResponse =
  GetApiReportsIdResponses[keyof GetApiReportsIdResponses];

export type PatchApiReportsIdData = {
  body?: {
    name?: string;
    description?: string;
    active?: boolean;
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}";
};

export type PatchApiReportsIdErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PatchApiReportsIdError =
  PatchApiReportsIdErrors[keyof PatchApiReportsIdErrors];

export type PatchApiReportsIdResponses = {
  /**
   * Report updated successfully
   */
  200: {
    id: string;
    name: string;
    description?: string;
    active: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type PatchApiReportsIdResponse =
  PatchApiReportsIdResponses[keyof PatchApiReportsIdResponses];

export type PostApiReportsIdDataData = {
  body?: {
    metric: {
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      field?: string;
    };
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    attribution?: {
      type: string;
      value: string;
    };
    groupBy?: Array<string>;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/data";
};

export type PostApiReportsIdDataErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdDataError =
  PostApiReportsIdDataErrors[keyof PostApiReportsIdDataErrors];

export type PostApiReportsIdDataResponses = {
  /**
   * Report data
   */
  200: Array<{
    timestamp: string;
    value: number;
    category?: string;
  }>;
};

export type PostApiReportsIdDataResponse =
  PostApiReportsIdDataResponses[keyof PostApiReportsIdDataResponses];

export type PostApiReportsIdDatasetData = {
  body?: {
    metrics: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    attribution?: {
      type: string;
      value: string;
    };
    groupBy?: Array<string>;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/dataset";
};

export type PostApiReportsIdDatasetErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdDatasetError =
  PostApiReportsIdDatasetErrors[keyof PostApiReportsIdDatasetErrors];

export type PostApiReportsIdDatasetResponses = {
  /**
   * Dataset data
   */
  200: Array<{
    [key: string]: unknown;
  }>;
};

export type PostApiReportsIdDatasetResponse =
  PostApiReportsIdDatasetResponses[keyof PostApiReportsIdDatasetResponses];

export type PostApiReportsIdRealtimeDataData = {
  body?: {
    metric: {
      type:
        | "COUNT"
        | "SUM"
        | "CATEGORY"
        | "COMPOUND_SUM"
        | "LEAF_SUM"
        | "BOOLEAN";
      field?: string;
    };
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    attribution?: {
      type: string;
      value: string;
    };
    groupBy?: Array<string>;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/realtime/data";
};

export type PostApiReportsIdRealtimeDataErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdRealtimeDataError =
  PostApiReportsIdRealtimeDataErrors[keyof PostApiReportsIdRealtimeDataErrors];

export type PostApiReportsIdRealtimeDataResponses = {
  /**
   * Report data
   */
  200: Array<{
    timestamp: string;
    value: number;
    category?: string;
  }>;
};

export type PostApiReportsIdRealtimeDataResponse =
  PostApiReportsIdRealtimeDataResponses[
    keyof PostApiReportsIdRealtimeDataResponses
  ];

export type PostApiReportsIdRealtimeDatasetData = {
  body?: {
    metrics: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    attribution?: {
      type: string;
      value: string;
    };
    groupBy?: Array<string>;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/realtime/dataset";
};

export type PostApiReportsIdRealtimeDatasetErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdRealtimeDatasetError =
  PostApiReportsIdRealtimeDatasetErrors[
    keyof PostApiReportsIdRealtimeDatasetErrors
  ];

export type PostApiReportsIdRealtimeDatasetResponses = {
  /**
   * Dataset data
   */
  200: Array<{
    [key: string]: unknown;
  }>;
};

export type PostApiReportsIdRealtimeDatasetResponse =
  PostApiReportsIdRealtimeDatasetResponses[
    keyof PostApiReportsIdRealtimeDatasetResponses
  ];

export type PostApiReportsIdRealtimeGroupsData = {
  body?: {
    metrics: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    attribution?: {
      type: string;
      value: string;
    };
    groupBy?: Array<string>;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/realtime/groups";
};

export type PostApiReportsIdRealtimeGroupsErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdRealtimeGroupsError =
  PostApiReportsIdRealtimeGroupsErrors[
    keyof PostApiReportsIdRealtimeGroupsErrors
  ];

export type PostApiReportsIdRealtimeGroupsResponses = {
  /**
   * Groups data
   */
  200: Array<{
    [key: string]: unknown;
  }>;
};

export type PostApiReportsIdRealtimeGroupsResponse =
  PostApiReportsIdRealtimeGroupsResponses[
    keyof PostApiReportsIdRealtimeGroupsResponses
  ];

export type PostApiReportsIdFlatGroupsData = {
  body?: {
    metrics?: Array<string>;
    groupBy: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    sortBy?: string;
    sortOrder?: "asc" | "desc";
    wasm?: boolean;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/flat-groups";
};

export type PostApiReportsIdFlatGroupsErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdFlatGroupsError =
  PostApiReportsIdFlatGroupsErrors[keyof PostApiReportsIdFlatGroupsErrors];

export type PostApiReportsIdFlatGroupsResponses = {
  /**
   * Flat groups data
   */
  200: Array<{
    [key: string]: unknown;
  }>;
};

export type PostApiReportsIdFlatGroupsResponse =
  PostApiReportsIdFlatGroupsResponses[
    keyof PostApiReportsIdFlatGroupsResponses
  ];

export type PostApiReportsIdRealtimeFlatGroupsData = {
  body?: {
    metrics?: Array<string>;
    groupBy: Array<string>;
    timeRange: {
      start: string;
      end: string;
    };
    granularity:
      | "100ms"
      | "200ms"
      | "250ms"
      | "500ms"
      | "second"
      | "minute"
      | "5minute"
      | "10minute"
      | "15minute"
      | "30minute"
      | "hour"
      | "2hour"
      | "4hour"
      | "6hour"
      | "12hour"
      | "day"
      | "3day"
      | "7day"
      | "15day"
      | "30day"
      | "45day"
      | "60day"
      | "90day";
    sortBy?: string;
    sortOrder?: "asc" | "desc";
    wasm?: boolean;
    limit?: number;
    offset?: number;
    filter?: {
      [key: string]: Array<{
        operator: string;
        value: unknown;
        OR?: unknown;
      }>;
    };
    compute?: {
      [key: string]: string;
    };
  };
  path: {
    id: string;
  };
  query?: never;
  url: "/api/reports/{id}/realtime/flat-groups";
};

export type PostApiReportsIdRealtimeFlatGroupsErrors = {
  /**
   * Error response
   */
  404: {
    error: string;
  };
};

export type PostApiReportsIdRealtimeFlatGroupsError =
  PostApiReportsIdRealtimeFlatGroupsErrors[
    keyof PostApiReportsIdRealtimeFlatGroupsErrors
  ];

export type PostApiReportsIdRealtimeFlatGroupsResponses = {
  /**
   * Flat groups data
   */
  200: Array<{
    [key: string]: unknown;
  }>;
};

export type PostApiReportsIdRealtimeFlatGroupsResponse =
  PostApiReportsIdRealtimeFlatGroupsResponses[
    keyof PostApiReportsIdRealtimeFlatGroupsResponses
  ];
