// This file is auto-generated by @hey-api/openapi-ts

import { client } from "./client.gen.ts";
import type {
  Client,
  Options as Options2,
  TDataShape,
} from "./client/index.ts";
import type {
  DeleteApiAggregationSourcesSourceIdData,
  DeleteApiAggregationSourcesSourceIdErrors,
  DeleteApiAggregationSourcesSourceIdResponses,
  DeleteApiAuthKeysKeyData,
  DeleteApiAuthKeysKeyErrors,
  DeleteApiAuthKeysKeyResponses,
  DeleteApiReportsIdData,
  DeleteApiReportsIdErrors,
  DeleteApiReportsIdResponses,
  GetApiAggregationSourcesData,
  GetApiAggregationSourcesErrors,
  GetApiAggregationSourcesResponses,
  GetApiAuthKeysKeyData,
  GetApiAuthKeysKeyErrors,
  GetApiAuthKeysKeyResponses,
  GetApiAuthUsageData,
  GetApiAuthUsageErrors,
  GetApiAuthUsageResponses,
  GetApiEventSourcesData,
  GetApiEventSourcesErrors,
  GetApiEventSourcesNameData,
  GetApiEventSourcesNameErrors,
  GetApiEventSourcesNameEventTypesData,
  GetApiEventSourcesNameEventTypesErrors,
  GetApiEventSourcesNameEventTypesResponses,
  GetApiEventSourcesNameResponses,
  GetApiEventSourcesResponses,
  GetApiReportsData,
  GetApiReportsErrors,
  GetApiReportsIdData,
  GetApiReportsIdErrors,
  GetApiReportsIdResponses,
  GetApiReportsResponses,
  PatchApiAuthKeysKeyData,
  PatchApiAuthKeysKeyErrors,
  PatchApiAuthKeysKeyResponses,
  PatchApiReportsIdData,
  PatchApiReportsIdErrors,
  PatchApiReportsIdResponses,
  PostApiAggregationSourcesData,
  PostApiAggregationSourcesErrors,
  PostApiAggregationSourcesResponses,
  PostApiAuthKeysData,
  PostApiAuthKeysErrors,
  PostApiAuthKeysResponses,
  PostApiEventSourcesData,
  PostApiEventSourcesResponses,
  PostApiEventsSourceEventsData,
  PostApiEventsSourceEventsErrors,
  PostApiEventsSourceEventsResponses,
  PostApiReportsData,
  PostApiReportsIdDataData,
  PostApiReportsIdDataErrors,
  PostApiReportsIdDataResponses,
  PostApiReportsIdDatasetData,
  PostApiReportsIdDatasetErrors,
  PostApiReportsIdDatasetResponses,
  PostApiReportsResponses,
} from "./types.gen.ts";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthKeys = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthKeysResponses,
    PostApiAuthKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiAuthKeysKeyResponses,
    DeleteApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const getApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAuthKeysKeyResponses,
    GetApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const patchApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiAuthKeysKeyResponses,
    PatchApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiAuthUsage = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthUsageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiAuthUsageResponses,
    GetApiAuthUsageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage",
    ...options,
  });
};

export const postApiEventsSourceEvents = <ThrowOnError extends boolean = false>(
  options: Options<PostApiEventsSourceEventsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiEventsSourceEventsResponses,
    PostApiEventsSourceEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/events/{source}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all Event Sources for the user
 */
export const getApiEventSources = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiEventSourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiEventSourcesResponses,
    GetApiEventSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources",
    ...options,
  });
};

/**
 * Create an Event Source
 */
export const postApiEventSources = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiEventSourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiEventSourcesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get an Event Source by name
 */
export const getApiEventSourcesName = <ThrowOnError extends boolean = false>(
  options: Options<GetApiEventSourcesNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiEventSourcesNameResponses,
    GetApiEventSourcesNameErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{name}",
    ...options,
  });
};

/**
 * List Event Types for a Source
 */
export const getApiEventSourcesNameEventTypes = <
  ThrowOnError extends boolean = false,
>(options: Options<GetApiEventSourcesNameEventTypesData, ThrowOnError>) => {
  return (options.client ?? client).get<
    GetApiEventSourcesNameEventTypesResponses,
    GetApiEventSourcesNameEventTypesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{name}/event-types",
    ...options,
  });
};

/**
 * List Aggregation Sources for a Report
 */
export const getApiAggregationSources = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAggregationSourcesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAggregationSourcesResponses,
    GetApiAggregationSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources",
    ...options,
  });
};

/**
 * Add an Aggregation Source to a Report
 */
export const postApiAggregationSources = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAggregationSourcesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiAggregationSourcesResponses,
    PostApiAggregationSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove an Aggregation Source from a Report
 */
export const deleteApiAggregationSourcesSourceId = <
  ThrowOnError extends boolean = false,
>(options: Options<DeleteApiAggregationSourcesSourceIdData, ThrowOnError>) => {
  return (options.client ?? client).delete<
    DeleteApiAggregationSourcesSourceIdResponses,
    DeleteApiAggregationSourcesSourceIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources/{sourceId}",
    ...options,
  });
};

/**
 * List all Report Definitions for the user
 */
export const getApiReports = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiReportsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiReportsResponses,
    GetApiReportsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports",
    ...options,
  });
};

/**
 * Create a Report Definition
 */
export const postApiReports = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiReportsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiReportsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Query a Report's data
 */
export const postApiReportsIdData = <ThrowOnError extends boolean = false>(
  options: Options<PostApiReportsIdDataData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiReportsIdDataResponses,
    PostApiReportsIdDataErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/data",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's dataset
 */
export const postApiReportsIdDataset = <ThrowOnError extends boolean = false>(
  options: Options<PostApiReportsIdDatasetData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiReportsIdDatasetResponses,
    PostApiReportsIdDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/dataset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a Report Definition
 */
export const deleteApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiReportsIdResponses,
    DeleteApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
  });
};

/**
 * Get a Report Definition
 */
export const getApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiReportsIdResponses,
    GetApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
  });
};

/**
 * Update a Report Definition
 */
export const patchApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiReportsIdResponses,
    PatchApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
