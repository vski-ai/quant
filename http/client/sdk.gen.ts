// This file is auto-generated by @hey-api/openapi-ts

import { client } from "./client.gen.ts";
import type {
  Client,
  Options as Options2,
  TDataShape,
} from "./client/index.ts";
import type {
  DeleteApiAuthKeysKeyData,
  DeleteApiAuthKeysKeyErrors,
  DeleteApiAuthKeysKeyResponses,
  GetApiAuthKeysKeyData,
  GetApiAuthKeysKeyErrors,
  GetApiAuthKeysKeyResponses,
  GetApiAuthUsageData,
  GetApiAuthUsageErrors,
  GetApiAuthUsageResponses,
  PatchApiAuthKeysKeyData,
  PatchApiAuthKeysKeyErrors,
  PatchApiAuthKeysKeyResponses,
  PostApiAuthKeysData,
  PostApiAuthKeysErrors,
  PostApiAuthKeysResponses,
  PostApiEventsSourceEventsData,
  PostApiEventsSourceEventsErrors,
  PostApiEventsSourceEventsResponses,
} from "./types.gen.ts";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiEventsSourceEvents = <ThrowOnError extends boolean = false>(
  options: Options<PostApiEventsSourceEventsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiEventsSourceEventsResponses,
    PostApiEventsSourceEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/events/{source}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiAuthKeys = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthKeysResponses,
    PostApiAuthKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiAuthKeysKeyResponses,
    DeleteApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const getApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAuthKeysKeyResponses,
    GetApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const patchApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiAuthKeysKeyResponses,
    PatchApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiAuthUsage = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthUsageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiAuthUsageResponses,
    GetApiAuthUsageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage",
    ...options,
  });
};
