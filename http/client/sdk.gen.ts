// This file is auto-generated by @hey-api/openapi-ts

import { client } from "./client.gen.ts";
import type {
  Client,
  Options as Options2,
  TDataShape,
} from "./client/index.ts";
import type {
  DeleteApiAggregationSourceSourceIdData,
  DeleteApiAuthKeysKeyData,
  DeleteApiAuthKeysKeyErrors,
  DeleteApiAuthKeysKeyResponses,
  DeleteApiReportIdData,
  GetApiAggregationSourceData,
  GetApiAuthKeysKeyData,
  GetApiAuthKeysKeyErrors,
  GetApiAuthKeysKeyResponses,
  GetApiAuthUsageData,
  GetApiAuthUsageErrors,
  GetApiAuthUsageResponses,
  GetApiEventSourceData,
  GetApiEventSourceNameData,
  GetApiEventSourceNameEventTypesData,
  GetApiReportData,
  GetApiReportIdData,
  PatchApiAuthKeysKeyData,
  PatchApiAuthKeysKeyErrors,
  PatchApiAuthKeysKeyResponses,
  PatchApiReportIdData,
  PostApiAggregationSourceData,
  PostApiAuthKeysData,
  PostApiAuthKeysErrors,
  PostApiAuthKeysResponses,
  PostApiEventSourceData,
  PostApiEventsSourceEventsData,
  PostApiEventsSourceEventsErrors,
  PostApiEventsSourceEventsResponses,
  PostApiReportData,
} from "./types.gen.ts";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiEventsSourceEvents = <ThrowOnError extends boolean = false>(
  options: Options<PostApiEventsSourceEventsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiEventsSourceEventsResponses,
    PostApiEventsSourceEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/events/{source}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all Event Sources for the user
 */
export const getApiEventSource = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiEventSourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-source",
    ...options,
  });
};

/**
 * Create an Event Source
 */
export const postApiEventSource = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiEventSourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-source",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get an Event Source by name
 */
export const getApiEventSourceName = <ThrowOnError extends boolean = false>(
  options: Options<GetApiEventSourceNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-source/{name}",
    ...options,
  });
};

/**
 * List Event Types for a Source
 */
export const getApiEventSourceNameEventTypes = <
  ThrowOnError extends boolean = false,
>(options: Options<GetApiEventSourceNameEventTypesData, ThrowOnError>) => {
  return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-source/{name}/event-types",
    ...options,
  });
};

/**
 * List Aggregation Sources for a Report
 */
export const getApiAggregationSource = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAggregationSourceData, ThrowOnError>,
) => {
  return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-source",
    ...options,
  });
};

/**
 * Add an Aggregation Source to a Report
 */
export const postApiAggregationSource = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAggregationSourceData, ThrowOnError>,
) => {
  return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-source",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove an Aggregation Source from a Report
 */
export const deleteApiAggregationSourceSourceId = <
  ThrowOnError extends boolean = false,
>(options: Options<DeleteApiAggregationSourceSourceIdData, ThrowOnError>) => {
  return (options.client ?? client).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-source/{sourceId}",
    ...options,
  });
};

/**
 * List all Report Definitions for the user
 */
export const getApiReport = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiReportData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/report",
    ...options,
  });
};

/**
 * Create a Report Definition
 */
export const postApiReport = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiReportData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/report",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a Report Definition
 */
export const deleteApiReportId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiReportIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/report/{id}",
    ...options,
  });
};

/**
 * Get a Report Definition
 */
export const getApiReportId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiReportIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/report/{id}",
    ...options,
  });
};

/**
 * Update a Report Definition
 */
export const patchApiReportId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiReportIdData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<unknown, unknown, ThrowOnError>({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/report/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiAuthKeys = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthKeysResponses,
    PostApiAuthKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiAuthKeysKeyResponses,
    DeleteApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const getApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAuthKeysKeyResponses,
    GetApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
  });
};

export const patchApiAuthKeysKey = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiAuthKeysKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiAuthKeysKeyResponses,
    PatchApiAuthKeysKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{key}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiAuthUsage = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthUsageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiAuthUsageResponses,
    GetApiAuthUsageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage",
    ...options,
  });
};
