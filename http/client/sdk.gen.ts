// This file is auto-generated by @hey-api/openapi-ts

import { client } from "./client.gen.ts";
import type {
  Client,
  Options as Options2,
  TDataShape,
} from "./client/index.ts";
import type {
  DeleteApiAggregationSourcesSourceIdData,
  DeleteApiAggregationSourcesSourceIdErrors,
  DeleteApiAggregationSourcesSourceIdResponses,
  DeleteApiAuthKeysIdData,
  DeleteApiAuthKeysIdErrors,
  DeleteApiAuthKeysIdResponses,
  DeleteApiEventSourcesIdData,
  DeleteApiEventSourcesIdErrors,
  DeleteApiEventSourcesIdResponses,
  DeleteApiReportsIdData,
  DeleteApiReportsIdErrors,
  DeleteApiReportsIdResponses,
  GetApiAggregationSourcesData,
  GetApiAggregationSourcesErrors,
  GetApiAggregationSourcesResponses,
  GetApiAuthKeysData,
  GetApiAuthKeysErrors,
  GetApiAuthKeysIdData,
  GetApiAuthKeysIdErrors,
  GetApiAuthKeysIdResponses,
  GetApiAuthKeysResponses,
  GetApiAuthUsageData,
  GetApiAuthUsageErrors,
  GetApiAuthUsageResponses,
  GetApiEventSourcesData,
  GetApiEventSourcesErrors,
  GetApiEventSourcesIdData,
  GetApiEventSourcesIdErrors,
  GetApiEventSourcesIdEventsData,
  GetApiEventSourcesIdEventsErrors,
  GetApiEventSourcesIdEventsResponses,
  GetApiEventSourcesIdResponses,
  GetApiEventSourcesResponses,
  GetApiReportsData,
  GetApiReportsErrors,
  GetApiReportsIdData,
  GetApiReportsIdErrors,
  GetApiReportsIdMetaData,
  GetApiReportsIdMetaErrors,
  GetApiReportsIdMetaResponses,
  GetApiReportsIdResponses,
  GetApiReportsResponses,
  PatchApiAuthKeysIdData,
  PatchApiAuthKeysIdErrors,
  PatchApiAuthKeysIdResponses,
  PatchApiEventSourcesIdData,
  PatchApiEventSourcesIdErrors,
  PatchApiEventSourcesIdResponses,
  PatchApiReportsIdData,
  PatchApiReportsIdErrors,
  PatchApiReportsIdResponses,
  PostApiAggregationSourcesData,
  PostApiAggregationSourcesErrors,
  PostApiAggregationSourcesResponses,
  PostApiAuthKeysData,
  PostApiAuthKeysErrors,
  PostApiAuthKeysResponses,
  PostApiAuthUsageDatasetData,
  PostApiAuthUsageDatasetErrors,
  PostApiAuthUsageDatasetResponses,
  PostApiAuthUsageReportData,
  PostApiAuthUsageReportErrors,
  PostApiAuthUsageReportResponses,
  PostApiEventSourcesData,
  PostApiEventSourcesResponses,
  PostApiEventsSourceIdEventsData,
  PostApiEventsSourceIdEventsErrors,
  PostApiEventsSourceIdEventsResponses,
  PostApiReportsData,
  PostApiReportsIdDataData,
  PostApiReportsIdDataErrors,
  PostApiReportsIdDataResponses,
  PostApiReportsIdDatasetData,
  PostApiReportsIdDatasetErrors,
  PostApiReportsIdDatasetResponses,
  PostApiReportsIdFlatGroupsData,
  PostApiReportsIdFlatGroupsErrors,
  PostApiReportsIdFlatGroupsResponses,
  PostApiReportsIdRealtimeDataData,
  PostApiReportsIdRealtimeDataErrors,
  PostApiReportsIdRealtimeDataResponses,
  PostApiReportsIdRealtimeDatasetData,
  PostApiReportsIdRealtimeDatasetErrors,
  PostApiReportsIdRealtimeDatasetResponses,
  PostApiReportsIdRealtimeFlatGroupsData,
  PostApiReportsIdRealtimeFlatGroupsErrors,
  PostApiReportsIdRealtimeFlatGroupsResponses,
  PostApiReportsIdRealtimeGroupsData,
  PostApiReportsIdRealtimeGroupsErrors,
  PostApiReportsIdRealtimeGroupsResponses,
  PostApiReportsResponses,
} from "./types.gen.ts";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getApiAuthKeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiAuthKeysResponses,
    GetApiAuthKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys",
    ...options,
  });
};

export const postApiAuthKeys = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthKeysResponses,
    PostApiAuthKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiAuthKeysId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAuthKeysIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiAuthKeysIdResponses,
    DeleteApiAuthKeysIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{id}",
    ...options,
  });
};

export const getApiAuthKeysId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAuthKeysIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAuthKeysIdResponses,
    GetApiAuthKeysIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{id}",
    ...options,
  });
};

export const patchApiAuthKeysId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiAuthKeysIdData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiAuthKeysIdResponses,
    PatchApiAuthKeysIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/keys/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiAuthUsage = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthUsageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiAuthUsageResponses,
    GetApiAuthUsageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage",
    ...options,
  });
};

export const postApiAuthUsageReport = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthUsageReportData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthUsageReportResponses,
    PostApiAuthUsageReportErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage/report",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiAuthUsageDataset = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthUsageDatasetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiAuthUsageDatasetResponses,
    PostApiAuthUsageDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/auth/usage/dataset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiEventsSourceIdEvents = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiEventsSourceIdEventsData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiEventsSourceIdEventsResponses,
    PostApiEventsSourceIdEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/events/{sourceId}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all Event Sources for the user
 */
export const getApiEventSources = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiEventSourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiEventSourcesResponses,
    GetApiEventSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources",
    ...options,
  });
};

/**
 * Create an Event Source
 */
export const postApiEventSources = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiEventSourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiEventSourcesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete an Event Source
 */
export const deleteApiEventSourcesId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiEventSourcesIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiEventSourcesIdResponses,
    DeleteApiEventSourcesIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{id}",
    ...options,
  });
};

/**
 * Get an Event Source by ID
 */
export const getApiEventSourcesId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiEventSourcesIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiEventSourcesIdResponses,
    GetApiEventSourcesIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{id}",
    ...options,
  });
};

/**
 * Update an Event Source
 */
export const patchApiEventSourcesId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiEventSourcesIdData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiEventSourcesIdResponses,
    PatchApiEventSourcesIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get recent events for an Event Source
 */
export const getApiEventSourcesIdEvents = <
  ThrowOnError extends boolean = false,
>(options: Options<GetApiEventSourcesIdEventsData, ThrowOnError>) => {
  return (options.client ?? client).get<
    GetApiEventSourcesIdEventsResponses,
    GetApiEventSourcesIdEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/event-sources/{id}/events",
    ...options,
  });
};

/**
 * List Aggregation Sources for a Report
 */
export const getApiAggregationSources = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAggregationSourcesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiAggregationSourcesResponses,
    GetApiAggregationSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources",
    ...options,
  });
};

/**
 * Add an Aggregation Source to a Report
 */
export const postApiAggregationSources = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAggregationSourcesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiAggregationSourcesResponses,
    PostApiAggregationSourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove an Aggregation Source from a Report
 */
export const deleteApiAggregationSourcesSourceId = <
  ThrowOnError extends boolean = false,
>(options: Options<DeleteApiAggregationSourcesSourceIdData, ThrowOnError>) => {
  return (options.client ?? client).delete<
    DeleteApiAggregationSourcesSourceIdResponses,
    DeleteApiAggregationSourcesSourceIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/aggregation-sources/{sourceId}",
    ...options,
  });
};

/**
 * List all Report Definitions for the user
 */
export const getApiReports = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiReportsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiReportsResponses,
    GetApiReportsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports",
    ...options,
  });
};

/**
 * Create a Report Definition
 */
export const postApiReports = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiReportsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiReportsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get a Report's metadata
 */
export const getApiReportsIdMeta = <ThrowOnError extends boolean = false>(
  options: Options<GetApiReportsIdMetaData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiReportsIdMetaResponses,
    GetApiReportsIdMetaErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/meta",
    ...options,
  });
};

/**
 * Delete a Report Definition
 */
export const deleteApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteApiReportsIdResponses,
    DeleteApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
  });
};

/**
 * Get a Report Definition
 */
export const getApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetApiReportsIdResponses,
    GetApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
  });
};

/**
 * Update a Report Definition
 */
export const patchApiReportsId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiReportsIdData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    PatchApiReportsIdResponses,
    PatchApiReportsIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's data
 */
export const postApiReportsIdData = <ThrowOnError extends boolean = false>(
  options: Options<PostApiReportsIdDataData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiReportsIdDataResponses,
    PostApiReportsIdDataErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/data",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's dataset
 */
export const postApiReportsIdDataset = <ThrowOnError extends boolean = false>(
  options: Options<PostApiReportsIdDatasetData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostApiReportsIdDatasetResponses,
    PostApiReportsIdDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/dataset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's data in realtime
 */
export const postApiReportsIdRealtimeData = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiReportsIdRealtimeDataData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiReportsIdRealtimeDataResponses,
    PostApiReportsIdRealtimeDataErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/realtime/data",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's dataset in realtime
 */
export const postApiReportsIdRealtimeDataset = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiReportsIdRealtimeDatasetData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiReportsIdRealtimeDatasetResponses,
    PostApiReportsIdRealtimeDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/realtime/dataset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's groups in realtime
 */
export const postApiReportsIdRealtimeGroups = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiReportsIdRealtimeGroupsData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiReportsIdRealtimeGroupsResponses,
    PostApiReportsIdRealtimeGroupsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/realtime/groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's flat groups
 */
export const postApiReportsIdFlatGroups = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiReportsIdFlatGroupsData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiReportsIdFlatGroupsResponses,
    PostApiReportsIdFlatGroupsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/flat-groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Query a Report's flat groups in realtime
 */
export const postApiReportsIdRealtimeFlatGroups = <
  ThrowOnError extends boolean = false,
>(options: Options<PostApiReportsIdRealtimeFlatGroupsData, ThrowOnError>) => {
  return (options.client ?? client).post<
    PostApiReportsIdRealtimeFlatGroupsResponses,
    PostApiReportsIdRealtimeFlatGroupsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "X-API-Key",
        type: "apiKey",
      },
      {
        name: "X-Master-Key",
        type: "apiKey",
      },
    ],
    url: "/api/reports/{id}/realtime/flat-groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
